/*
  This javascript is added to norms page while creating an assessment
  Checkboxes to select factors are disabled by default.
  On document ready  
  enable all checkboxes for factors
  Add change even on checkboxes to select factor
  On checked, enable all input tags under that factor_norm
  On Uncheck, if factor_norm is new then disable all input tags under that factor_norm, else mark as destroy
  Also toggle checked class for li tag for that factor
  
  For checkboxes to mark a factor as critical,
  on checked, set value of hidden critical field as on
  on uncheck, set value of hidden critical field as off
*/

jQuery(document).ready(function($) {
  $("input[name='selected_factor']").removeAttr("disabled");
  $("input[name='selected_factor']").change(function() {
    var index = $(this).attr("index");
    if ($(this).is(":checked")) {
      $("input:not(:checkbox)[index='" + index + "']").removeAttr("disabled");
      $("select[index='" + index + "']").removeAttr("disabled");
      $("#critical_checkbox_" + index).removeAttr("disabled");
      $("#li_" + index).addClass("checked");
    } else {
      var id = $("#id_" + index).val();
      if (id != null && id != "") {
          $("#destroy_" + index).val(true);
      } else {
          $("input:not(:checkbox)[index='" + index + "']").attr("disabled", 'disabled');
          $("select[index='" + index + "']").attr("disabled", 'disabled');
          $("#critical_checkbox_" + index).attr("disabled", 'disabled');
          $("#li_" + index).removeClass("checked");
      }
    }
  });

  /*
    Disable proceed btn on submit to avoid multiple post requests
  */

  $("input[name='checkbox_critical']").change(function() {
    var index = $(this).attr("index");
    if ($(this).is(":checked")) {
      $("#critical_" + index).val("on");
    } else {
      $("#critical_" + index).val("off");
    }
  });

  $("#check_all").change(function() {
    $(".check_factor").prop("checked", $(this).is(":checked"));
    $(".check_factor").trigger("change");
  });
  
  //- -validation for norms range ---//
  var user_type = $('input[name="user"]').val()
  if (user_type == "SuperAdmin"){
    var traits_min = parseInt(<%= Rails.application.config.validators["traits_range"]["SuperAdmin"]["min"] %>);  
    var traits_max = parseInt(<%= Rails.application.config.validators["traits_range"]["SuperAdmin"]["max"] %>);  
  }else{
    var traits_min = parseInt(<%= Rails.application.config.validators["traits_range"]["Admin"]["min"] %>);  
    var traits_max = parseInt(<%= Rails.application.config.validators["traits_range"]["Admin"]["max"] %>);  
  }
  //--form submission
  $('#edit_assessment').submit(function() {
      if ($('input[name=selected_factor]:checked').length >= traits_min && $('input[name=selected_factor]:checked').length <= traits_max) {
          $('#edit_assessment input[type="submit"]').attr("disabled", "disabled");
          return true;
      } else {
          $("#trait_flag").removeAttr('hidden');
          return false;
      }
  });
  //- -validation for norms range ---//

  //--- To check the number of traits selected ----//
  var approximate_time_per_factor = <%= Rails.application.config.validators["approx_time_per_trait"]%>;
  var traits_selected_counter = $('input[name="selected_factor"]:checked').length;  
  var approximate_time = traits_selected_counter * approximate_time_per_factor; //total time in seconds
  var approximate_time_sec = approximate_time % 60; // 120sec % 60sec = 0seconds
  var approximate_time_min = parseInt(approximate_time / 60); // 120sec / 60 = 2mins
  
  $("#traits-counter").html(pad(traits_selected_counter));
  $("#approximate-time").html(pad(approximate_time_min)+" min : "+pad(approximate_time_sec)+" sec");
  
  textHighlighter(traits_selected_counter);

  $('input[name="selected_factor"]').on("change",function(){
    if($(this).is(":checked")){
      timer(1);//function to iterate the timer
    }else{
      timer(-1);//function to iterate the timer
    }
  });
  //--- To check the number of traits selected ----//
  function pad(val)
  {
    var valString = val + "";
    if(valString.length < 2)
    {
      return "0" + valString;
    }else{
      return valString;
    }
  }

  function textHighlighter(counter)
  {
    var lower_limit = traits_min;
    var upper_limit = traits_max;
    
    if(counter < lower_limit || counter > upper_limit){
      $("#traits-counter").addClass("color-stop");
      $("#label_counter").addClass("color-stop");
      $("#traits-counter").removeClass("color-warning");
    }else{
      $("#traits-counter").addClass("color-warning");
      $("#traits-counter").removeClass("color-stop");
      $("#label_counter").removeClass("color-stop");
    }
  }

  // increments the timer
  function timer(iterator){
    traits_selected_counter += iterator;
    approximate_time = traits_selected_counter * approximate_time_per_factor;
    approximate_time_sec = approximate_time % 60; // 120sec % 60sec = 0seconds
    approximate_time_min = parseInt(approximate_time / 60); // 120sec / 60 = 2mins
    $("#traits-counter").html(pad(traits_selected_counter));
    $("#approximate-time").html(pad(approximate_time_min)+" min : "+pad(approximate_time_sec)+" sec");
    textHighlighter(traits_selected_counter);
  }


  $('.scroll').click(function(){
    $('html, body').animate({
        scrollTop: $( $.attr(this, 'href') ).offset().top - 37
    }, 500);
    return false;
  });
});
