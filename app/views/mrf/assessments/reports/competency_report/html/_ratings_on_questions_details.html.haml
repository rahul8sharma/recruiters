- question_index = 1
.ratings_on_questions_details.border-bottom-grayDark
  .divider2
  .container
    .title
      Details of #{get_assessment_purpose(@report)}&#176; Ratings on Questions
    .divider2
    - @report.report_data[:competency_scores].each do |competency_name, competency_scores|
      - competency_scores[:trait_scores].each do |trait_scores|
        .frame
          .heading.pull-left
            Competency: #{competency_name}
          .heading.pull-right
            Trait: #{trait_scores[:trait][:name]}
          .clr
          - trait_scores[:items][:other_responses].each do |item|
            .padding-all2
              .medium-text
                %b Question #{question_index}:
                - question_index += 1  
                #{item[:item]}
              .divider1
              %table.frequency_rating_table{:cellpadding=>"0", :cellspacing=> "0", width: "100%"}
                %tbody
                  %tr.captions
                    %td.dark_mute_bg{:rowspan=>"2"}
                      Stakeholder(s)
                    %td.dark_mute_bg{:rowspan=>"2"}
                      Average rating given 
                      %br/
                      by Stakeholders
                    %td.dark_mute_bg{:rowspan=>"2"}
                      No. of 
                      %br/
                      Respondents
                    %td.dark_mute_bg{:colspan=> item[:responses].size}
                      Rating
                  %tr.captions.rating_ranges
                    - item[:responses].each do |option, count|
                      %td
                        #{option}
                 
                  - item[:role_wise_scores].each do |role, role_wise_scores|
                    %tr
                      %td.green_bg.captions
                        #{role.titleize}
                      %td.rating_score.average_rating
                        #{role_wise_scores[:average_score]}
                      %td.rating_score.average_rating
                        #{role_wise_scores[:count]}
                      - role_wise_scores[:responses].each do |option, count|
                        %td.rating_score
                          #{count}
                          -#add class ".max_value" to ".rating_score" if td have maximum value of that row
                      
                  %tr.overall
                    %td.orange_bg.captions
                      Overall
                    %td.orange_bg.captions
                      #{item[:score]}
                    %td.orange_bg.captions
                      #{item[:count]}
                    - item[:responses].each do |option, count|
                      %td.rating_score
                        #{count}
          .divider2
        .divider2
  .divider2        
