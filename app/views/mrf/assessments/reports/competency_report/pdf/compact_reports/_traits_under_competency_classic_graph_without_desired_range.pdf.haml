.traits_under_graph
  .graph_container
    .left_sec.pull-left
      .graph_instructions.pull-left
        .span6.first.bold
          = truncate competency, length: 45
        .span1.divider1.graph_stakeholder_rating_icon
        .span1.divider1.graph_classic_user_icon
        .clr
      .clr
      %ul
        - trait_scores.each do |trait_score|
          - self_score = trait_score[:average_score_self][:points]
          - other_score = trait_score[:average_score_excluding_self][:points]
          - if self_score || other_score
            %li
              .span6.first
                = trait_score[:trait][:name]
              .stakeholder_rating.small-text.pull-left
                = trait_score[:average_score_excluding_self][:points] || "-"
              .self_rating.small-text.span
                = trait_score[:average_score_self][:points] || "-"
              .clr
    .right_sec.span14.first.pull-right
      .classic_competency_graph
        .classic_competency_graph_scale
          .block.pull-left
            = @trait_graph_buckets.first.min_val
          - @trait_graph_buckets[1..100].each do |trait_graph_bucket|
            .block.pull-left{:style=>"width: #{550/(@trait_graph_buckets.size-1)}px; text-align: right"}
              = trait_graph_bucket.min_val
          .clr
        .graph
          .graph_content
            - min = @trait_graph_buckets.map(&:min_val).min
            - max = @trait_graph_buckets.map(&:min_val).max
            - step =  (100.0/(@norm_buckets.size-1))
          
            - trait_scores.each do |trait_score|
              - self_score = trait_score[:average_score_self][:points]
              - other_score = trait_score[:average_score_excluding_self][:points]
              - min = @trait_graph_buckets.map(&:min_val).min
              - max = @trait_graph_buckets.map(&:min_val).max

              - start_from = trait_score[:trait][:from_norm_bucket][:name]
              - end_to = trait_score[:trait][:to_norm_bucket][:name]
              
              - if self_score && other_score
                - min_score = [self_score,other_score].min
                - width = (convertToRange(min,max,0,100,other_score) - convertToRange(min,max,0,100,self_score)).abs
                - margin = convertToRange(min,max,0,100,min_score)
                .divider1


                .graph_bar.trait_under{ class: (self_score == other_score ? "equal_rating" : ""), style: "margin-left:#{margin}%;width:#{width}%" }
                  - if self_score == other_score
                    .overlapped_score_icon
                  - else
                    -# add class ".equal_rating" to ".graph_bar.equal_rating" if score is equal
                    .graph_self_rating{ style: "#{min_score == self_score ? 'left:-14px;right:auto' : 'right:-14px;left:auto'}" }
                    .graph_stakeholder_rating{ style: "#{min_score == other_score ? 'left:-14px;right:auto;' : 'right:-14px;left:auto'}" }
                .divider1   
              - elsif(self_score || other_score)
                - min_score = (self_score || other_score)
                - width = 0
                - margin = convertToRange(min,max,0,100,min_score)
                .divider1


                .graph_bar.trait_under{ class: (self_score == other_score ? "equal_rating" : ""), style: "margin-left:#{margin}%;width:#{width}%" }
                  -# add class ".equal_rating" to ".graph_bar.equal_rating" if score is equal
                  - if self_score
                    .graph_self_rating{ style: "#{min_score == self_score ? 'left:-14px;right:auto' : 'right:-14px;left:auto'}" }
                  - else
                    .graph_stakeholder_rating{ style: "#{min_score == other_score ? 'left:-14px;right:auto;' : 'right:-14px;left:auto'}" }
                .divider1
    .clr
