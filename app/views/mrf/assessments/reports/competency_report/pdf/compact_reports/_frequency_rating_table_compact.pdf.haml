- roles = @report.report_data[:competency_scores].first[1][:role_wise_scores].keys
- step_size = roles.size > 4 ? 1 : 2
- @report.report_data[:competency_scores].each_slice(step_size) do |step_data|
  = render partial: "shared/360/compact_mrf_report_header.pdf.haml" , :locals => { :display_text => "Details on 360 Degree Ratings on Competencies/Values"}
  .scores.border-bottom-grayLighter.mrf_data_points
    .color-info.big-text
      Details on 360&#176 Ratings on Competencies/Values
    .divider1    
    - step_data.each do |competency, competency_scores|
      .frame
        .heading.pull-left
          #{competency}
        .heading.pull-right
          360&#176; Score: 
          = competency_scores[:score][:points] || "-"
        .clr
        .padding-all1
          .extra-medium-text
            Frequency of Ratings
          .divider1
          - if competency_scores[:role_wise_scores].present?
            %table.frequency_rating_table{:cellpadding=>"0", :cellspacing=> "0", width: "100%"}
              %tbody
                %tr.captions
                  %td.dark_mute_bg{:rowspan=>"2"}
                    Stakeholder(s)
                  %td.dark_mute_bg{:rowspan=>"2"}
                    Average rating given 
                    %br/
                    by Stakeholders
                  %td.dark_mute_bg{:rowspan=>"2"}
                    No. of 
                    %br/
                    Respondents
                  %td.dark_mute_bg{:colspan=>"#{@competency_graph_buckets.size}"}
                    Rating
                %tr.captions.rating_ranges
                  - @competency_graph_buckets.each do |bucket|
                    %td
                      #{bucket.name}
                  
                - stakeholder_count = 0
                - overall_points = 0
                - competency_scores[:role_wise_scores].each do |role, score|
                  - max_score = score[:bucket_wise_percentages].values.map{|x| x[:count] }.max
                  - stakeholder_count += score[:count].to_i
                  - overall_points += score[:points].to_f
                  %tr
                    %td.green_bg.captions
                      = role.titleize
                    %td.rating_score.average_rating
                      = score[:points]
                    %td.rating_score.average_rating
                      = score[:count]
                    - @competency_graph_buckets.each do |bucket|
                      - bucket_score = score[:bucket_wise_percentages][bucket.name][:count]
                      %td.rating_score
                        = bucket_score
                        -#add class ".max_value" to ".rating_score" if td have maximum value of that row
                    
                %tr.overall
                  %td.orange_bg.captions
                    Overall
                  %td.orange_bg.captions
                    = (overall_points / stakeholder_count).round(2)
                  %td.orange_bg.captions
                    = stakeholder_count
                  - max_score = @competency_graph_buckets.map{|bucket| competency_scores[:role_wise_scores].collect{|role,score| score[:bucket_wise_percentages][bucket.name][:count] }.sum }.max
                  - @competency_graph_buckets.each do |bucket|
                    - total = competency_scores[:role_wise_scores].collect{|role,score| score[:bucket_wise_percentages][bucket.name][:count] }.sum
                    %td.rating_score
                      = total
            .divider1
          
          .clr
        .divider1
      .divider1
  .page-break    