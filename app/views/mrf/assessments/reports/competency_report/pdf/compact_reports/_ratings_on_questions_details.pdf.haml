- question_index = 1
- other_item_responses = get_other_item_responses(@report)
- step = other_item_responses.first[:role_wise_scores].size > 6 ? 1 : 2
- other_item_responses.each_slice(step).each_with_index do |items, slice_index|
  = render partial: "shared/360/compact_mrf_report_header", :locals => { :display_text => "Strengths and Areas of Improvement"}
  .scores
    .ratings_on_questions_details
      .title
        Details of 360&#176; Ratings on Questions
      .divider1
      - items.each_with_index do |item,item_index|
        .frame
          .heading.pull-left
            Competency: #{item[:competency_name]}
          .heading.pull-right
            Trait: #{item[:trait_name]}
          .clr
          .padding-all2
            .medium-text
              %b Question #{question_index}:
              - question_index += 1 
              #{item[:item]}
            .divider1
            %table.frequency_rating_table{:cellpadding=>"0", :cellspacing=> "0", width: "100%"}
              %tbody
                %tr.captions
                  %td.dark_mute_bg{:rowspan=>"2"}
                    Stakeholder(s)
                  %td.dark_mute_bg{:rowspan=>"2"}
                    Average rating given 
                    %br/
                    by Stakeholders
                  %td.dark_mute_bg{:rowspan=>"2"}
                    No. of 
                    %br/
                    Respondents
                  %td.dark_mute_bg{:colspan=> item[:responses].size}
                    Rating
                %tr.captions.rating_ranges
                  - item[:responses].each do |option, count|
                    %td
                      #{option}
               
                - item[:role_wise_scores].each do |role, role_wise_scores|
                  %tr
                    %td.green_bg.captions
                      #{role}
                    %td.rating_score.average_rating
                      #{role_wise_scores[:average_score]}
                    %td.rating_score.average_rating
                      #{role_wise_scores[:count]}
                    - role_wise_scores[:responses].each do |option, count|
                      %td.rating_score
                        #{count}
                        -#add class ".max_value" to ".rating_score" if td have maximum value of that row
                    
                %tr.overall
                  %td.orange_bg.captions
                    Overall
                  %td.orange_bg.captions
                    #{item[:score]}
                  %td.orange_bg.captions
                    #{item[:count]}
                  - item[:responses].each do |option, count|
                    %td.rating_score
                      #{count}
        .divider1
  .page-break  
