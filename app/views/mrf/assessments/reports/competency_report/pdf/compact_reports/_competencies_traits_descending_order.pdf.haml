- sorted_trait_scores = @report.report_data[:competency_scores].collect{|competency,competency_score| competency_score[:trait_scores] }.flatten.sort_by{|trait_score| trait_score[:average_score_excluding_self][:points].to_f }.reverse.uniq
- sorted_trait_scores.each_slice(15) do |step_data|
  = render partial: "shared/360/compact_mrf_report_header" , :locals => { :display_text => "#{get_assessment_purpose(@report)} Degree Ratings on Traits"}
  .scores_competencies_graph.descending_order.padding-all1
    .divider1
    .color-info.big-text.pull-left
      #{get_assessment_purpose(@report)}&#176; Ratings on Traits
    .graph_instructions.medium-text.pull-left.left-offset1
      .graph_stakeholder_rating_icon.span.first
      .span.bold
        #{get_assessment_purpose(@report)}&#176; Rating
      .clr
    .clr
    %p.medium-text.gray-darker
      All traits included under competencies are presented together in a descending order of average stakeholder ratings
    .traits_under_graph
      .graph_container
        .left_sec.pull-left
          .graph_instructions.pull-right
            .span1.divider2.graph_stakeholder_rating_icon
            .clr
          .clr  
          %ul
            - step_data.each do |trait_score|
              %li
                .trait_title.first.span7{ title: trait_score[:trait][:name] }
                  = truncate trait_score[:trait][:name], length: 45
                .stakeholder_rating.pull-left
                  = trait_score[:average_score_excluding_self][:points] || "-"
                .clr            
        .right_sec.span16.pull-right
          .classic_competency_graph
            .classic_competency_graph_scale
              .block.pull-left
                = @trait_graph_buckets.first.min_val
              - @trait_graph_buckets[1..@trait_graph_buckets.length-1].each do |trait_graph_bucket|
                .block.pull-left{:style=>"width: #{630/(@trait_graph_buckets.size-1)}px; text-align: right"}
                  = trait_graph_bucket.min_val

              .clr
            .graph
              .graph_content
                - old_min = @trait_graph_buckets.first.min_val
                - old_max = @trait_graph_buckets.last.max_val
                - step_data.each do |trait_score|
                  - if trait_score[:average_score_excluding_self][:points]
                    - percent_360 = convertToRange(old_min, old_max, 0, 100, trait_score[:average_score_excluding_self][:points])
                    - percent_360 = percent_360 == 0 ? 2 : percent_360
                  - else
                    - percent_360 = 0
                  - if trait_score[:average_score_self][:points]
                    - percent_self = convertToRange(old_min, old_max, 0, 100, trait_score[:average_score_self][:points])
                    - percent_self = percent_self == 0 ? 2 : percent_self
                  - else
                    - percent_self = 0
                  .divider1
                  .descending_graph_bar.max{:style => "width: #{percent_360}%; background: #a119a6"}
                  .divider1
        .clr
  .page-break
