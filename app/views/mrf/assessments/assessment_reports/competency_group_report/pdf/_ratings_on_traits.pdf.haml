- if @report.report_data[:mrf_ratings_on_traits]
  - sorted_trait_scores = @report.report_data[:competency_scores].collect{|competency,competency_score| competency_score[:trait_scores] }.flatten.sort_by{|trait_score| trait_score[:average_score_excluding_self][:points].to_f }.reverse.uniq
  - sorted_trait_scores.each_slice(15) do |step_data|
    = render :partial => "shared/360/group_report_header"
    .report_content
      .scores_competencies_graph.descending_order
        .color-info.big-text.pull-left
          #{get_assessment_purpose(@report)}&#176;  Ratings on Traits
        .pull-left.left-offset1{:style => "font-size: 47px;color: #B100A0"}
          &#8226;
        .span.bold.gray-dark
          Average 360&#176 Rating
        .clr
        .traits_under_graph
          .graph_container
            .left_sec.pull-left
              .graph_instructions.pull-right
                .span1.divider2.stakeholder_rating_icon
                .clr
              .clr
              %ul
                - step_data.each_with_index do |trait_score, index|
                  %li
                    .trait_title.first.span5.default
                      = truncate(trait_score[:trait][:name],length: 30)
                    .stakeholder_rating.pull-left
                      = trait_score[:average_score_excluding_self][:points]
                    .clr
                  
            .right_sec.span13.pull-right
              .classic_competency_graph
                .classic_competency_graph_scale
                  .block.pull-left
                    = @trait_graph_buckets.first.min_val
                  - scale_width = (510/(@trait_graph_buckets.size-1))
                  - @trait_graph_buckets[1..@trait_graph_buckets.length-1].each do |trait_graph_bucket|
                    .block.pull-left{:style=>"width: #{scale_width}px; text-align: right"}
                      = trait_graph_bucket.min_val
                  .clr
                .graph.no-background
                  .graph_content.no-background
                    - old_min = @trait_graph_buckets.first.min_val
                    - old_max = @trait_graph_buckets.last.max_val
                    - step_data.each do |trait_score|
                      - if trait_score[:average_score_excluding_self][:points]
                        - percent_360 = convertToRange(old_min, old_max, 0, 100, trait_score[:average_score_excluding_self][:points].to_f)
                        - percent_360 = percent_360 == 0 ? 1 : percent_360
                      - else
                        - percent_360 = 0
                      .divider1
                      .descending_graph_bar.max{:style => "width: #{percent_360}%; background: #a119a6"}
                      .divider1
          .clr
      .divider2
    .page-break
