- content_for :javascripts do
  = wicked_pdf_javascript_include_tag "reports"  

:css
  .report .competency_report .inner{margin-top:0px;} 
- @factor_scores = @report.report_data[:competency_scores].map{|competency, competency_scores| competency_scores[:factor_scores] }.reduce({}){|factor_scores, _hash| _hash.merge(factor_scores) }
- competency_step = Rails.application.config.reports[@view_mode]["competency_step"]
- competency_scores = @report.report_hash[:competency_scores].map{|key,value| [key,value] }


.competency_report
  = render :template => "assessment_reports/competency_report/html/cover_page", :locals => { competency_scores: competency_scores }

  = render :template => "assessment_reports/competency_report/html/comptencies_values_measured", :locals => {competency_scores: competency_scores, competency_step: competency_step}
  
  = render :template => "assessment_reports/competency_report/html/competency_report_page3"

  = render :partial => "assessment_reports/functional_report/html/functional_overview_section"
  = render :partial => "assessment_reports/functional_report/html/objective_questions"
  = render :partial => "assessment_reports/functional_report/html/subjective_questions"

.report      
  - if @report.report_hash[:enable_post_assessment_guidelines]
    - guides_step = Rails.application.config.reports[@view_mode]["guides_step"]
    /  check if "Development Guide for the Assessment Taker" is present
    - if @report.report_hash[:post_assessment_guidelines].present?
      - post_assessment_guidelines = @report.report_hash[:post_assessment_guidelines]
      - ordered_guides = post_assessment_guidelines.select{|factor_name, guide| !guide[:pass] && (guide[:factor_type] == "Suitability::Factor" || guide[:factor_type] == "Suitability::AlarmFactor") }.map{|factor,guide| [factor,guide] }
      - ordered_guides += post_assessment_guidelines.select{|factor_name, guide| guide[:pass] && (guide[:factor_type] == "Suitability::Factor" || guide[:factor_type] == "Suitability::AlarmFactor") }.map{|factor,guide| [factor,guide] }
      / - if @report.report_hash[:candidate_stage].to_sym == :candidate    
      - ordered_guides += post_assessment_guidelines.select{|factor_name, guide| guide[:pass] && guide[:factor_type] == "Suitability::DirectPredictor"}.map{|factor,guide| [factor,guide] }
        
      - (0..ordered_guides.length-1).step(guides_step) do |step|    
        - step_post_assessment_guidelines = Hash[ordered_guides[step..(step+(guides_step - 1))]]
        = render :template => "assessment_reports/competency_report/html/development_interview_guide_candidate", :locals => { :post_assessment_guidelines => step_post_assessment_guidelines, :step => step }
        .page-break
    
    /  check if "Guidelines for Assessment Taker's Manager" is present
    - if @report.report_hash[:guidelines_for_candidate_manager].present?
      - candidate_manager_guidelines = @report.report_hash[:guidelines_for_candidate_manager]    
      - ordered_guides = candidate_manager_guidelines.select{|factor_name, guide| !guide[:pass] && (guide[:factor_type] == "Suitability::Factor" || guide[:factor_type] == "Suitability::AlarmFactor") }.map{|factor,guide| [factor,guide] }
      - ordered_guides += candidate_manager_guidelines.select{|factor_name, guide| guide[:pass] && (guide[:factor_type] == "Suitability::Factor" || guide[:factor_type] == "Suitability::AlarmFactor") }.map{|factor,guide| [factor,guide] }
      - (0..ordered_guides.length-1).step(guides_step) do |step|
        - step_candidate_manager_guidelines = Hash[ordered_guides[step..(step+(guides_step - 1))]]     
        = render :template => "assessment_reports/competency_report/html/development_interview_guide_manager", :locals => { :guidelines_for_candidate_manager => step_candidate_manager_guidelines, :step => step }
        .page-break              
    
  = render :partial => "shared/reports/html/about_us"
  .page-break

  = render :partial => "shared/reports/html/legal_disclaimer"
  .page-break
