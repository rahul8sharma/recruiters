- guides_step = Rails.application.config.reports[@view_mode]["guides_step"]
- candidate_manager_guidelines = @report.report_hash[:guidelines_for_candidate_manager]
- ordered_guides = candidate_manager_guidelines.select{|factor_name, guide| !guide[:pass] && (guide[:factor_type] == "Suitability::Factor" || guide[:factor_type] == "Suitability::AlarmFactor") }.map{|factor,guide| [factor,guide] }
- ordered_guides += candidate_manager_guidelines.select{|factor_name, guide| guide[:pass] && (guide[:factor_type] == "Suitability::Factor" || guide[:factor_type] == "Suitability::AlarmFactor") }.map{|factor,guide| [factor,guide] }
- (0..ordered_guides.length-1).step(guides_step) do |step|
  - step_candidate_manager_guidelines = Hash[ordered_guides[step..(step+(guides_step - 1))]]     
  = render partial: "shared/reports/pdf/report_header.pdf.haml"
  .inner
    .scores.interview_guide
      .divider1
      - if step == 0
        %h1.font-normal.blue_heading.large-text.pull-left
          Guidelines for Assessment Taker&#39;s Manager
      - else
        .font-normal.blue_heading.large-text.pull-left
          Guidelines for Assessment Taker&#39;s Manager
      .instruction_container.pull-right
        .instructions
          .instruction1.pull-left
            Favorable Traits
          .instruction2.less_favorable.pull-left
            Less Favorable Traits
          .clr
      .clr
      .divider1
      %ul.clearfix.interview_guide_listing
        - step_candidate_manager_guidelines.each do |factor_name, guide|
          - factor_score = @factor_scores[factor_name]
          - from_norm_bucket = @company_norm_buckets.detect{|company_norm_bucket| company_norm_bucket.norm_bucket_ids.include? factor_score[:scale][:from_norm_bucket_uid] }
          - to_norm_bucket = @company_norm_buckets.detect{|company_norm_bucket| company_norm_bucket.norm_bucket_ids.include? factor_score[:scale][:to_norm_bucket_uid] }
          - norm_bucket_uid = factor_score[:norm_bucket_uid]
          - company_norm_bucket = @company_norm_buckets.detect{|company_norm_bucket| company_norm_bucket.norm_bucket_ids.include?(norm_bucket_uid)}
          - scored_weight = company_norm_bucket.weight
          - if @report.report_data[:show_favourable_above_desired_range]
            - klass = (scored_weight >= from_norm_bucket.weight) ? "favorable" : "less_favorable" 
          - else
            - klass = (scored_weight <= to_norm_bucket.weight && scored_weight >= from_norm_bucket.weight) ? "favorable" : "less_favorable" 
          %li
            .divider1
            .que-no.hexagon-icon{ class: klass }
            .factor-name.pull-left
              = factor_name
            .description.pull-left
              = guide[:body]
            .clr
            .divider1
  .page-break              
