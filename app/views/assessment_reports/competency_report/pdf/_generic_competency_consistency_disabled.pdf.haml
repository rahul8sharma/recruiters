- step_data.group_by{|trait_scores| trait_scores[:competency_name] }.each do |competency, trait_scores|  
  - company_norm_bucket = @company_norm_buckets.detect{|bucket| bucket.norm_bucket_ids.include?(trait_scores.first[:competency_data][:grade_uid])}
  .frame
    .heading.pull-left
      #{competency} 
    .heading.pull-right 
      = company_norm_bucket ? company_norm_bucket.name : trait_scores.first[:competency_data][:grade]
    .clr 
    %ul.clearfix.scores_listing.first
      - trait_scores.each do |factor_score|
        - scale_values = get_scale_calculations(factor_score, @company_norm_buckets, 0)
        %li{:id => "#{competency}#{factor_score[:factor_name]}"}
          .lhs-sec.pull-left
            %div{ class: "span1 first hexagon-icon #{scale_values[:genericKlass]}" }
            .factor-name.pull-left{ class: "#{factor_score[:type] == 'Functional::Trait' ? 'star':''}" }
              = factor_score[:factor_name] 
            .clr
          
          .score_slider.span8.pull-right
            .score_slider_inner
              .progress_container{style: "left: #{scale_values[:scale_offset]}%; width: #{scale_values[:scale_width]}%;"}
                .expected_score_progress{style:"width: #{scale_values[:range_width]}%; margin-left: #{scale_values[:range_offset]}%"}
              .marker_container
                .marker{ class: "#{scale_values[:genericKlass]}", style: "left: #{scale_values[:marker_position]}%; width: #{scale_values[:marker_width]}%" }
                  .score_indicater_container
                    .score_indicater
                      = scale_values[:company_norm_bucket_name]
                .clr
            .clr
          .clr
          .factor-description
            = factor_score[:description]
  .divider1
