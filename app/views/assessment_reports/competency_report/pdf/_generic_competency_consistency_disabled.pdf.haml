- step_data.group_by{|trait_scores| trait_scores[:competency_name] }.each do |competency, trait_scores|  
  - company_norm_bucket = @company_norm_buckets.detect{|bucket| bucket.norm_bucket_ids.include?(trait_scores.first[:competency_data][:grade_uid])}
  .frame
    .heading.pull-left
      #{competency} 
    .heading.pull-right 
      = company_norm_bucket ? company_norm_bucket.name : trait_scores.first[:competency_data][:grade]
    .clr 
    %ul.clearfix.scores_listing.first
      - trait_scores.each do |factor_score|
        - scale_values = get_scale_calculations(50, factor_score, @company_norm_buckets, 34)
        %li{:id => "#{competency}#{factor_score[:factor_name]}"}
          .lhs-sec.pull-left{:style=>"width:640px;"}
            .hexagon-icon{ class: "#{scale_values[:genericKlass]}" }
            .span.first
              .factor-name{ class: "#{factor_score[:type] == 'Functional::Trait' ? 'star':''}" }
                = factor_score[:factor_name]
          .rhs-sec.pull-left
            .slider{:style => "width:#{scale_values[:scale_width]}px"}
              - if ((scale_values[:width] == 34) && (scale_values[:to_norm_bucket_name] == @company_norm_buckets.last.name))
                - scale_values[:offset] = scale_values[:offset] - 34
              .pointer{ class: "#{scale_values[:genericKlass]}", style: "left: #{scale_values[:position]-20}px;" }
                .score-indicater
                  = scale_values[:company_norm_bucket_name]
                .arrow
              .range{ style: "margin-left: #{scale_values[:offset]}px;width: #{scale_values[:width]}px;" }
          .clr
          .factor-description
            = factor_score[:description]
  .divider1
