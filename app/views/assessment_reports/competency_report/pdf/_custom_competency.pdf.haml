- company_norm_bucket = @company_norm_buckets.detect{|bucket| bucket.norm_bucket_ids.include?(competency_data[:grade_uid])}
.frame
  .heading.pull-left
    #{competency_name} #{(step > 0 ? "(continued)":"")}
  .heading.pull-right 
    = company_norm_bucket ? company_norm_bucket.name : competency_data[:grade]
  .clr 
  %ul.clearfix.scores_listing.first
    - factor_scores.each do |factor_name, factor_score|
      - scale_values = get_scale_calculations(50, factor_score, @company_norm_buckets, 34)
      %li{:id => "#{competency_name}#{factor_name}"}
        .lhs-sec.pull-left{:style=>"width:520px;"}
          .hexagon-icon{ class: "#{scale_values[:klass]}" }
          .span.first
            .factor-name{ class: "#{factor_score[:type] == 'Functional::Trait' ? 'star':''}" }
              = factor_name
        .rhs-sec.pull-left
          .slider{:style => "width:#{scale_values[:scale_width]}px"}
            - if ((scale_values[:width] == 34) && (scale_values[:to_norm_bucket_name] == @company_norm_buckets.last.name))
              - scale_values[:offset] = scale_values[:offset] - 34
            .pointer{ class: "#{scale_values[:klass]}", style: "left: #{scale_values[:position]-20}px;" }
              .score-indicater
                = company_norm_bucket.name
              .arrow
            .range{ style: "margin-left: #{scale_values[:offset]}px;width: #{scale_values[:width]}px;" }
        .clr
        .divider1
        .factor-description
          = factor_score[:description]
        - if factor_score[:type] != 'Functional::Trait'
          .responses  
            %i.icon-align-justify
            Reliability of Candidate's Responses for this Factor:
            %span.score 
              = factor_score[:consistency_bucket]
          .divider1
.divider2
        
