- guides_step = Rails.application.config.reports[@view_mode]["guides_step"]
- if @report.report_hash[:guidelines_for_candidate_manager].present?
  - candidate_manager_guidelines = @report.report_hash[:guidelines_for_candidate_manager]    
  - ordered_guides = candidate_manager_guidelines.select{|factor_name, guide| !guide[:pass] && (guide[:factor_type] == "Suitability::Factor" || guide[:factor_type] == "Suitability::AlarmFactor") }.map{|factor,guide| [factor,guide] }
  - ordered_guides += candidate_manager_guidelines.select{|factor_name, guide| guide[:pass] && (guide[:factor_type] == "Suitability::Factor" || guide[:factor_type] == "Suitability::AlarmFactor") }.map{|factor,guide| [factor,guide] }
  - (0..ordered_guides.length-1).step(guides_step) do |step|
    - step_candidate_manager_guidelines = Hash[ordered_guides[step..(step+(guides_step - 1))]]     
    #manager_guideline.section06
      .divider2
      .scores.container.interview_guide
        .title.pull-left
          Guidelines for Assessment Taker&#39;s Manager
        .instruction_container.pull-right
          .instructions
            .instruction1.pull-left
              Favorable Traits
            .instruction2.pull-left
              Less Favorable Traits
            .clr
        .clr
        .divider1
        %ul.clearfix.scores_listing.interview_guide_listing
          - step_candidate_manager_guidelines.each do |factor_name, guide|
            - factor_score = @factor_scores[factor_name]
            - from_norm_bucket = @company_norm_buckets.detect{|company_norm_bucket| company_norm_bucket.norm_bucket_ids.include? factor_score[:scale][:from_norm_bucket_uid] }
            - to_norm_bucket = @company_norm_buckets.detect{|company_norm_bucket| company_norm_bucket.norm_bucket_ids.include? factor_score[:scale][:to_norm_bucket_uid] }
            - norm_bucket_uid = factor_score[:norm_bucket_uid]
            - company_norm_bucket = @company_norm_buckets.detect{|company_norm_bucket| company_norm_bucket.norm_bucket_ids.include?(norm_bucket_uid)}
            - scored_weight = company_norm_bucket.weight

            - section_value.each do |section|
              = render :partial => section["path"], :locals => {:scored_weight=> scored_weight, :from_norm_bucket => from_norm_bucket, :factor_name => factor_name, :guide => guide, :to_norm_bucket => to_norm_bucket}               
        .divider2
    .page-break              